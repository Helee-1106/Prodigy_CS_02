from PIL import Image
import numpy as np
import os

def load_image(path):
    try:
        img = Image.open(path).convert("RGB")
        return img
    except Exception as e:
        print(" Error loading image:", e)
        return 
    
def encrypt_image(img, key):
    arr = np.array(img).astype(np.int16)  # convert to larger type
    encrypted_arr = (arr + key) % 256
    return Image.fromarray(np.uint8(encrypted_arr))

def decrypt_image(img, key):
    arr = np.array(img).astype(np.int16)  # convert to larger type
    decrypted_arr = (arr - key) % 256
    return Image.fromarray(np.uint8(decrypted_arr))


def save_image(img, path):
    img.save(path)
    print(f"Image saved as: {path}")

def main():
    print(" Simple Image Encryption Tool")
    print("ðŸ“¸ Example: C:/Users/YourName/Pictures/photo.jpg or photo.jpg")

    # Ask for image path
    img_path = input("Enter image file path: ").strip()

    # Check if file exists
    if not os.path.isfile(img_path):
        print(" File not found. Please check the path.")
        return

    # Load image
    img = load_image(img_path)
    if img is None:
        return

    # Ask whether to encrypt or decrypt
    action = input("Do you want to (E)ncrypt or (D)ecrypt the image? ").strip().upper()
    if action not in ['E', 'D']:
        print(" Invalid choice. Enter 'E' or 'D'.")
        return

    # Ask for a numeric key
    try:
        key = int(input("Enter a numeric key (0â€“255): "))
        if not (0 <= key <= 255):
            raise ValueError
    except ValueError:
        print("Invalid key. Must be an integer between 0 and 255.")
        return

    # Process the image
    if action == 'E':
        result = encrypt_image(img, key)
        save_image(result, "encrypted_image.png")
    else:
        result = decrypt_image(img, key)
        save_image(result, "decrypted_image.png")

if __name__ == "__main__":
    main()

